{"version":3,"sources":["routes/Home.js","routes/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Todo","useState","todoData","setTodoData","textInput","setTextInput","error","setError","useEffect","length","onSubmit","e","preventDefault","tempData","push","type","value","onChange","target","placeholder","alert","map","item","index","class","key","Date","toLocaleString","onClick","newData","editItem","splice","removeItem","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"+QAkBeA,MAbf,WACI,OACI,6BACA,4BAAQC,UAAU,UAClB,wCAEA,0BAAMA,UAAU,OAChB,kBAAC,IAAD,CAAMC,GAAI,SAAQ,4BAAQD,UAAU,UAAlB,wB,sBCsEXE,MA7Ef,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACJC,EADI,KACMC,EADN,OAEuBF,mBAAS,IAFhC,mBAEJG,EAFI,KAEOC,EAFP,OAGeJ,oBAAS,GAHxB,mBAGJK,EAHI,KAGGC,EAHH,KAkCX,OAlBAC,qBAAU,WACHJ,EAAUK,OAAS,GAAGF,GAAS,GAC7BA,GAAS,KAChB,CAACH,IAgBC,6BACA,4BAAQN,UAAU,UACd,qCAEA,kBAAC,IAAD,CAAMC,GAAI,KAAI,4BAAQD,UAAU,UAAlB,kCACd,yBAAKA,UAAU,OACf,0BAAMY,SApCE,SAACC,GAEb,GADAA,EAAEC,kBACEN,EAAJ,CACA,IAAMO,EAAQ,YAAOX,GACrBW,EAASC,KAAKV,GACdD,EAAYU,GACZR,EAAa,OA+BL,2BAAOP,UAAU,cAAjB,YAEI,2BAAOiB,KAAK,OAAOC,MAASZ,EAAWa,SAAU,SAACN,GAAD,OAAMN,EAAaM,EAAEO,OAAOF,QAAQG,YAAY,aAAarB,UAAU,gBAE5H,2BAAOiB,KAAO,SAASC,MAAQ,SAASlB,UAAU,gBAGrDQ,EAAQc,MAAM,8BAA+B,KAEzClB,EAASmB,KAAI,SAACC,EAAKC,GACf,OACD,6BAASC,MAAM,aACX,6BAASA,MAAM,OAAOC,IAAKF,GACzB,4BAAQC,MAAM,eACZ,4BAAI,IAAIE,MAAOC,kBAEf,4BAAKL,IAEL,yBAAKE,MAAM,eACT,yBAAKA,MAAM,sBAAX,UADF,gBAIF,yBAAKA,MAAM,QACT,4BAAQI,QAAU,kBAtCzB,SAACL,GACd,IAAGjB,EAAH,CACA,IAAIuB,EAAO,YAAO3B,GAClB2B,EAAQN,GAASnB,EACjBD,EAAY0B,IAkC8BC,CAASP,IAAQzB,UAAU,WAAjD,QACA,4BAAQ8B,QAAS,kBA7CvB,SAACL,GACf,IAAIM,EAAO,YAAO3B,GAClB2B,EAAQE,OAAOR,EAAM,GACrBpB,EAAY0B,GA0C+BG,CAAWT,IAAQzB,UAAU,aAApD,kB,OC/CbmC,MAjBf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoC,KAAO,IAAIC,OAAK,GACrB,kBAAC,EAAD,OAEA,kBAAC,IAAD,CAAOD,KAAO,SACZ,kBAAC,EAAD,WCJQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.a7ff710c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Home.css';\r\n\r\n\r\nfunction Home(){\r\n    return(\r\n        <div>\r\n        <header className=\"header\">\r\n        <h1>My Todo</h1>\r\n        </header>\r\n        <span className=\"btn\">\r\n        <Link to =\"/Todo\"><button className=\"button\">See my TODO list</button></Link>\r\n        </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Todo.css';\r\n\r\n\r\nfunction Todo(){\r\n    const [todoData, setTodoData] = useState([])\r\n    const [textInput, setTextInput] = useState(\"\")\r\n    const [error, setError] = useState(false)\r\n\r\n    const addItem = (e) =>{\r\n        e.preventDefault();\r\n        if (error) return;\r\n        const tempData = [...todoData];\r\n        tempData.push(textInput)\r\n        setTodoData(tempData)\r\n        setTextInput(\"\")\r\n    }\r\n\r\n    //this hook displays a error message when the input characters exceed 25\r\n    //Displays nothing if characters<25\r\n    useEffect(() => {\r\n        if(textInput.length > 25)setError(true);\r\n        else setError(false)\r\n    },[textInput])\r\n    \r\n    const removeItem =(index) => {\r\n        let newData = [...todoData]\r\n        newData.splice(index,1)\r\n        setTodoData(newData)\r\n    }\r\n    \r\n    const editItem = (index) => {\r\n        if(error) return;\r\n        let newData = [...todoData]\r\n        newData[index] = textInput;\r\n        setTodoData(newData)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <header className=\"header\">\r\n            <h1>TODO</h1>\r\n        </header>\r\n            <Link to =\"/\"><button className=\"button\">Click here to go to Home page</button></Link>\r\n            <div className=\"inp\">\r\n            <form onSubmit={addItem}>\r\n                <label className=\"inputLabel\">\r\n                    Add Item:\r\n                    <input type=\"text\" value = {textInput} onChange={(e) =>setTextInput(e.target.value)} placeholder=\"Enter task\" className=\"inputfield\"/>\r\n                </label>\r\n                <input type = \"submit\" value = \"submit\" className=\"submitbtn\"/>    \r\n            </form>\r\n            </div>\r\n            {error ? alert(\"Enter a short task name !!\"): null}\r\n            {\r\n                 todoData.map((item,index) =>{\r\n                     return(\r\n                    <section class=\"card-list\">\r\n                        <article class=\"card\" key={index}>\r\n                          <header class=\"card-header\">\r\n                            <p>{new Date().toLocaleString()}\r\n                            </p>\r\n                            <h2>{item}</h2>\r\n                          </header>\r\n                            <div class=\"author-name\">\r\n                              <div class=\"author-name-prefix\">Author</div>\r\n                              Jeff Delaney\r\n                            </div>\r\n                          <div class=\"tags\">\r\n                            <button onClick ={()=>editItem(index)} className=\"editbtn\">Edit</button>\r\n                            <button onClick={() => removeItem(index)} className=\"deletebtn\">Delete</button>\r\n                          </div>\r\n                        </article>\r\n                    </section>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport './App.css';\r\nimport Home from \"./routes/Home\"\r\nimport Todo from \"./routes/Todo\"\r\nimport {BrowserRouter, Switch, Route, Link} from 'react-router-dom'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n      <Switch>\r\n        <Route path = \"/\" exact>\r\n          <Home />\r\n          </Route>\r\n          <Route path = \"/Todo\">\r\n            <Todo />\r\n          </Route>\r\n      </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}